{"version":3,"sources":["actions/errorActions.js","actions/types.js","actions/authActions.js","components/auth/RegisterModal.js","components/auth/LoginModal.js","components/auth/Logout.js","components/AppNavbar.js","actions/itemActions.js","components/ToDoList.js","reducers/itemReducer.js","reducers/errorReducer.js","reducers/authReducer.js","reducers/index.js","store.js","components/itemModal.js","App.js","serviceWorker.js","index.js"],"names":["returnErrors","msg","status","id","type","payload","clearErrors","tokenConfig","getState","token","auth","config","headers","RegisterModal","state","modal","name","email","password","toggle","props","setState","onChange","e","target","value","onSubmit","preventDefault","newUser","register","prevProps","this","error","isAuthenticated","NavLink","onClick","href","Modal","isOpen","ModalHeader","ModalBody","Alert","color","Form","FormGroup","Label","for","Input","placeholder","className","Button","style","marginTop","block","Component","connect","dispatch","body","JSON","stringify","axios","post","then","res","data","catch","err","response","LoginModal","user","login","Logout","logout","AppNavbar","authLinks","NavItem","guestLinks","Navbar","dark","expand","Container","NavbarBrand","NavbarToggler","Collapse","navbar","Nav","setItemsLoading","ToDoList","onDeleteClick","deleteItem","getItems","items","item","ListGroup","TransitionGroup","map","_id","CSSTransition","key","timeout","classNames","ListGroupItem","size","bind","get","delete","initialState","loading","localStorage","getItem","isLoading","combineReducers","action","filter","setItem","removeItem","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","ItemModal","newItem","addItem","marginBottom","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.da8e5311.chunk.js","sourcesContent":["import {GET_ERRORS, CLEAR_ERRORS} from './types';\r\n\r\n// RETURN ERRORS\r\nexport const returnErrors = (msg, status, id = null) => {\r\n    return {\r\n        type: GET_ERRORS,\r\n        payload: {msg, status, id}\r\n    };\r\n};\r\n\r\n// CLEAR ERRORS\r\nexport const clearErrors = () => {\r\n    return {\r\n        type: CLEAR_ERRORS\r\n    };\r\n};","export const GET_ITEMS = 'GET_ITEMS';\r\nexport const ADD_ITEM = 'ADD_ITEM';\r\nexport const DELETE_ITEM = 'DELETE_ITEM';\r\nexport const ITEMS_LOADING = 'ITEMS_LOADING';\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const USER_LOADED = \"USER_LOADED\";\r\nexport const AUTH_ERROR = \"AUTH_ERROR\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\r\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\r\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\r\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\r\nexport const GET_ERRORS = \"GET_ERRORS\";\r\nexport const CLEAR_ERRORS = \"CLEAR_ERRORS\";","import axios from 'axios';\r\nimport {returnErrors} from './errorActions';\r\nimport {USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, REGISTER_SUCCESS, REGISTER_FAIL, LOGOUT_SUCCESS} from './types';\r\n\r\n// Check token and load user\r\nexport const loadUser = () => (dispatch, getState) => {\r\n    // User loading\r\n    dispatch({type: USER_LOADING});\r\n\r\n    axios.get('/api/auth/user', tokenConfig(getState))\r\n    .then(res => dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data\r\n    }))\r\n    .catch(err => {\r\n        dispatch(returnErrors(err.response.data, err.response.status));\r\n        dispatch({\r\n            type: AUTH_ERROR\r\n        });\r\n    })\r\n};\r\n\r\n// Register user\r\nexport const register = ({name, email, password}) => dispatch => {\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\n    // Request body\r\n    const body = JSON.stringify({name, email, password});\r\n\r\n    axios.post('/api/users', body, config)\r\n    .then(res => dispatch({\r\n        type: REGISTER_SUCCESS,\r\n        payload: res.data\r\n    }))\r\n    .catch(err => {\r\n        dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\r\n        dispatch({\r\n            type: REGISTER_FAIL\r\n        });\r\n    });\r\n};\r\n\r\n// Login user\r\nexport const login = ({email, password}) => dispatch => {\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\n    // Request body\r\n    const body = JSON.stringify({email, password});\r\n\r\n    axios.post('/api/auth', body, config)\r\n    .then(res => dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: res.data\r\n    }))\r\n    .catch(err => {\r\n        dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\r\n        dispatch({\r\n            type: LOGIN_FAIL\r\n        });\r\n    });\r\n};\r\n\r\n// Logout user\r\nexport const logout = () => {\r\n    return {\r\n        type: LOGOUT_SUCCESS\r\n    };\r\n};\r\n\r\n// Setup config/headers and token\r\nexport const tokenConfig = getState => {\r\n    // Get token from localStorage\r\n    const token = getState().auth.token;\r\n\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            \"Content-type\" : \"application/json\"\r\n        }\r\n    }\r\n    \r\n    // If token, add to headers\r\n    if(token) {\r\n        config. headers['x-auth-token'] = token;\r\n    }\r\n\r\n    return config;\r\n}","import React, {Component} from 'react';\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    NavLink,\r\n    Alert\r\n} from 'reactstrap';\r\nimport {connect} from 'react-redux';\r\nimport propTypes from 'prop-types';\r\nimport {register} from '../../actions/authActions';\r\nimport {clearErrors} from '../../actions/errorActions';\r\nimport { timingSafeEqual } from 'crypto';\r\n\r\nclass RegisterModal extends Component {\r\n    state = {\r\n        modal: false,\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        msg: null\r\n    };\r\n\r\n    static propTypes = {\r\n        isAuthenticated: propTypes.bool,\r\n        error: propTypes.object.isRequired,\r\n        register: propTypes.func.isRequired,\r\n        clearErrors: propTypes.func.isRequired\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const {error, isAuthenticated} = this.props;\r\n        if(error !== prevProps.error) {\r\n            // Check for register error\r\n            if(error.id === 'REGISTER_FAIL') {\r\n                this.setState({msg: error.msg.msg});\r\n            } else {\r\n                this.setState({msg: null});\r\n            }\r\n        }\r\n\r\n        // If authenticated, close modal\r\n        if(this.state.modal) {\r\n            if(isAuthenticated) {\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    toggle = () => {\r\n        // Clear errors\r\n        this.props.clearErrors();\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        });\r\n    };\r\n\r\n    onChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    };\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const {name, email, password} = this.state;\r\n\r\n        // Create user object\r\n        const newUser = {\r\n            name,\r\n            email,\r\n            password\r\n        };\r\n\r\n        // Attempt to register\r\n        this.props.register(newUser);\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <NavLink onClick={this.toggle} href=\"#\">Register</NavLink>\r\n\r\n                    <Modal\r\n                    isOpen={this.state.modal}\r\n                    toggle={this.toggle}>\r\n                        <ModalHeader toggle={this.toggle}>Register</ModalHeader>\r\n                        <ModalBody>\r\n                            {this.state.msg ? (<Alert color=\"danger\">{this.state.msg}</Alert>) : null}\r\n                            <Form onSubmit={this.onSubmit}>\r\n                                <FormGroup>\r\n                                    <Label for=\"name\">Name</Label>\r\n                                    <Input\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    id=\"name\"\r\n                                    placeholder=\"Name\"\r\n                                    className=\"mb-4\"\r\n                                    onChange={this.onChange} />\r\n\r\n                                    <Label for=\"email\">Email</Label>\r\n                                    <Input\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    id=\"email\"\r\n                                    placeholder=\"Email\"\r\n                                    className=\"mb-4\"\r\n                                    onChange={this.onChange} />\r\n\r\n                                    <Label for=\"password\">Password</Label>\r\n                                    <Input\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    id=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    className=\"mb-4\"\r\n                                    onChange={this.onChange} />\r\n\r\n                                    <Button\r\n                                    color=\"dark\"\r\n                                    style={{marginTop: '2rem'}}\r\n                                    block>Register</Button>\r\n                                </FormGroup>\r\n                            </Form>\r\n                        </ModalBody>\r\n                    </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    error: state.error\r\n});\r\n\r\nexport default connect(mapStateToProps, {register, clearErrors})(RegisterModal);","import React, {Component} from 'react';\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    NavLink,\r\n    Alert\r\n} from 'reactstrap';\r\nimport {connect} from 'react-redux';\r\nimport propTypes from 'prop-types';\r\nimport {login} from '../../actions/authActions';\r\nimport {clearErrors} from '../../actions/errorActions';\r\n\r\nclass LoginModal extends Component {\r\n    state = {\r\n        modal: false,\r\n        email: '',\r\n        password: '',\r\n        msg: null\r\n    };\r\n\r\n    static propTypes = {\r\n        isAuthenticated: propTypes.bool,\r\n        error: propTypes.object.isRequired,\r\n        login: propTypes.func.isRequired,\r\n        clearErrors: propTypes.func.isRequired\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const {error, isAuthenticated} = this.props;\r\n        if(error !== prevProps.error) {\r\n            // Check for register error\r\n            if(error.id === 'LOGIN_FAIL') {\r\n                this.setState({msg: error.msg.msg});\r\n            } else {\r\n                this.setState({msg: null});\r\n            }\r\n        }\r\n\r\n        // If authenticated, close modal\r\n        if(this.state.modal) {\r\n            if(isAuthenticated) {\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    toggle = () => {\r\n        // Clear errors\r\n        this.props.clearErrors();\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        });\r\n    };\r\n\r\n    onChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    };\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const {email, password} = this.state;\r\n        const user = {\r\n            email,\r\n            password\r\n        }\r\n\r\n        // Attempt to login\r\n        this.props.login(user);\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <NavLink onClick={this.toggle} href=\"#\">Login</NavLink>\r\n\r\n                    <Modal\r\n                    isOpen={this.state.modal}\r\n                    toggle={this.toggle}>\r\n                        <ModalHeader toggle={this.toggle}>Login</ModalHeader>\r\n                        <ModalBody>\r\n                            {this.state.msg ? (<Alert color=\"danger\">{this.state.msg}</Alert>) : null}\r\n                            <Form onSubmit={this.onSubmit}>\r\n                                <FormGroup>\r\n                                    <Label for=\"email\">Email</Label>\r\n                                    <Input\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    id=\"email\"\r\n                                    placeholder=\"Email\"\r\n                                    className=\"mb-4\"\r\n                                    onChange={this.onChange} />\r\n\r\n                                    <Label for=\"password\">Password</Label>\r\n                                    <Input\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    id=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    className=\"mb-4\"\r\n                                    onChange={this.onChange} />\r\n\r\n                                    <Button\r\n                                    color=\"dark\"\r\n                                    style={{marginTop: '2rem'}}\r\n                                    block>Login</Button>\r\n                                </FormGroup>\r\n                            </Form>\r\n                        </ModalBody>\r\n                    </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    error: state.error\r\n});\r\n\r\nexport default connect(mapStateToProps, {login, clearErrors})(LoginModal);","import React, {Component, Fragment} from 'react';\r\nimport {NavLink} from 'reactstrap';\r\nimport {connect} from 'react-redux';\r\nimport {logout} from '../../actions/authActions';\r\nimport propTypes from 'prop-types';\r\n\r\nclass Logout extends Component {\r\n    static propTypes = {\r\n        logout: propTypes.func.isRequired\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <NavLink onClick={this.props.logout} href=\"#\">Logout</NavLink>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, {logout})(Logout);","import React, {Component, Fragment} from 'react';\r\nimport {Collapse, Navbar, NavbarToggler ,NavbarBrand, Nav, NavItem, NavLink, Container} from 'reactstrap';\r\nimport {connect} from 'react-redux';\r\nimport propTypes from 'prop-types';\r\nimport RegisterModal from './auth/RegisterModal';\r\nimport LoginModal from './auth/LoginModal';\r\nimport Logout from './auth/Logout';\r\n\r\nclass AppNavbar extends Component {\r\n    state = {\r\n        isOpen: false\r\n    };\r\n\r\n    static propTypes = {\r\n        auth: propTypes.object.isRequired\r\n    };\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {isAuthenticated, user} = this.props.auth;\r\n\r\n        const authLinks = (\r\n            <Fragment>\r\n                <NavItem>\r\n                    <span className=\"navbar-text mr-3\">\r\n                        <strong>{user ? `Welcome ${user.name}` : ''}</strong>\r\n                    </span>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <Logout />\r\n                </NavItem>\r\n            </Fragment>\r\n        );\r\n\r\n        const guestLinks = (\r\n            <Fragment>\r\n                <NavItem>\r\n                    <RegisterModal />\r\n                </NavItem>\r\n                <NavItem>\r\n                    <LoginModal />\r\n                </NavItem>\r\n            </Fragment>\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\r\n                    <Container>\r\n                        <NavbarBrand href=\"/\">To Do List</NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggle}/>\r\n                        <Collapse isOpen={this.state.isOpen} navbar>\r\n                            <Nav className=\"ml-auto\" navbar>\r\n                                {isAuthenticated ? authLinks : guestLinks}\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(AppNavbar);","import axios from 'axios';\r\nimport {GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING} from './types';\r\nimport {tokenConfig} from './authActions';\r\nimport {returnErrors} from './errorActions';\r\n\r\nexport const getItems = () => dispatch => {\r\n    dispatch(setItemsLoading());\r\n    axios\r\n    .get('/api/items')\r\n    .then(res => \r\n        dispatch({\r\n            type: GET_ITEMS,\r\n            payload: res.data\r\n        }))\r\n    .catch(err => dispatch(returnErrors(err.response.data, err.response.status)))\r\n};\r\n\r\nexport const addItem = (item) => (dispatch, getState) => {\r\n    axios\r\n    .post('/api/items', item, tokenConfig(getState))\r\n    .then(res => \r\n        dispatch({\r\n            type: ADD_ITEM,\r\n            payload: res.data\r\n        }))\r\n    .catch(err => dispatch(returnErrors(err.response.data, err.response.status)))\r\n};\r\n\r\nexport const deleteItem = (id) => (dispatch, getState) => {\r\n    axios.delete(`/api/items/${id}`, tokenConfig(getState)).then(res =>\r\n        dispatch({\r\n            type: DELETE_ITEM,\r\n            payload: id\r\n        }))\r\n    .catch(err => dispatch(returnErrors(err.response.data, err.response.status)))\r\n};\r\n\r\nexport const setItemsLoading = () => {\r\n    return {\r\n        type: ITEMS_LOADING\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {Container, ListGroup, ListGroupItem, Button} from 'reactstrap';\r\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\r\nimport {connect} from 'react-redux';\r\nimport {getItems, deleteItem} from '../actions/itemActions';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ToDoList extends Component {\r\n    static propTypes = {\r\n        getItems: PropTypes.func.isRequired,\r\n        item: PropTypes.object.isRequired,\r\n        isAuthenticated: PropTypes.bool\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getItems();\r\n    }\r\n\r\n    onDeleteClick = (id) => {\r\n        this.props.deleteItem(id);\r\n    };\r\n    \r\n    render() {\r\n        const {items} = this.props.item;\r\n        return(\r\n            <Container>\r\n                <ListGroup>\r\n                    <TransitionGroup className=\"todo-list\">\r\n                        {items.map(({_id, name}) => (\r\n                            <CSSTransition key={_id} timeout={500} classNames=\"fade\">\r\n                                <ListGroupItem>\r\n                                    {this.props.isAuthenticated ? <Button className=\"remove-btn\" color=\"danger\" size=\"sm\" onClick={this.onDeleteClick.bind(this, _id)}>&times;</Button> : null}\r\n                                    {name}\r\n                                </ListGroupItem>\r\n                            </CSSTransition>\r\n                        ))}\r\n                    </TransitionGroup>\r\n                </ListGroup>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    item: state.item,\r\n    isAuthenticated: state.auth.isAuthenticated\r\n});\r\n\r\nexport default connect(mapStateToProps, {getItems, deleteItem})(ToDoList);","import {GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING} from '../actions/types';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    loading: false\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case GET_ITEMS:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                loading: false\r\n            }\r\n        case DELETE_ITEM:\r\n            return {\r\n                ...state,\r\n                items: state.items.filter(item => item._id !== action.payload)\r\n            }\r\n        case ADD_ITEM:\r\n            return {\r\n                ...state,\r\n                items: [action.payload, ...state.items]\r\n            }\r\n        case ITEMS_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {GET_ERRORS, CLEAR_ERRORS} from '../actions/types';\r\n\r\nconst initialState = {\r\n    msg: {},\r\n    status: null,\r\n    id: null\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case GET_ERRORS:\r\n            return {\r\n                msg: action.payload.msg,\r\n                status: action.payload.status,\r\n                id: action.payload.id\r\n            };\r\n        case CLEAR_ERRORS:\r\n            return {\r\n                msg: {},\r\n                status: null,\r\n                id: null\r\n            };\r\n            default:\r\n                return state;\r\n    }\r\n}","import {USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, REGISTER_SUCCESS, REGISTER_FAIL, LOGOUT_SUCCESS} from '../actions/types';\r\n\r\nconst initialState = {\r\n    token: localStorage.getItem('token'),\r\n    isAuthenticated: null,\r\n    isLoading: false,\r\n    user: null\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            };\r\n        case USER_LOADED:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: true,\r\n                isLoading: false,\r\n                user: action.payload\r\n            };\r\n        case LOGIN_SUCCESS:\r\n        case REGISTER_SUCCESS:\r\n            localStorage.setItem('token', action.payload.token);\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                isAuthenticated: true,\r\n                isLoading: false\r\n            };\r\n        case AUTH_ERROR:\r\n        case LOGIN_FAIL:\r\n        case LOGOUT_SUCCESS:\r\n        case REGISTER_FAIL:\r\n            localStorage.removeItem('token');\r\n            return {\r\n                ...state,\r\n                token: null,\r\n                user: null,\r\n                isAuthenticated: false,\r\n                isLoading: false,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport itemReducer from './itemReducer';\r\nimport errorReducer from './errorReducer';\r\nimport authReducer from './authReducer';\r\n\r\nexport default combineReducers({\r\n    item: itemReducer,\r\n    error: errorReducer,\r\n    auth: authReducer\r\n});","import {createStore, applyMiddleware, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(rootReducer, initialState, compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n));\r\n\r\nexport default store;","import React, {Component} from 'react';\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input\r\n} from 'reactstrap';\r\nimport {connect} from 'react-redux';\r\nimport {addItem} from '../actions/itemActions';\r\nimport propTypes from 'prop-types';\r\n\r\nclass ItemModal extends Component {\r\n    state = {\r\n        modal: false,\r\n        name: ''\r\n    }\r\n\r\n    static propTypes = {\r\n        isAuthenticated: propTypes.bool\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        });\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const newItem = {\r\n            name: this.state.name\r\n        }\r\n\r\n        //Add item via addItem action\r\n        this.props.addItem(newItem);\r\n\r\n        //Close modal\r\n        this.toggle()\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                {this.props.isAuthenticated ? <Button\r\n                color=\"dark\"\r\n                style={{marginBottom: '2rem'}}\r\n                onClick={this.toggle}>\r\n                    Add Task</Button> : <h4 className=\"mb-3 ml-4\">Log in to manage tasks</h4>}\r\n\r\n                    <Modal\r\n                    isOpen={this.state.modal}\r\n                    toggle={this.toggle}>\r\n                        <ModalHeader toggle={this.toggle}>Add to list</ModalHeader>\r\n                        <ModalBody>\r\n                            <Form onSubmit={this.onSubmit}>\r\n                                <FormGroup>\r\n                                    <Label for=\"item\">Task</Label>\r\n                                    <Input\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    id=\"item\"\r\n                                    placeholder=\"Add task\"\r\n                                    onChange={this.onChange} />\r\n                                    <Button\r\n                                    color=\"dark\"\r\n                                    style={{marginTop: '2rem'}}\r\n                                    block>Add Task</Button>\r\n                                </FormGroup>\r\n                            </Form>\r\n                        </ModalBody>\r\n                    </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    item: state.item,\r\n    isAuthenticated: state.auth.isAuthenticated\r\n});\r\n\r\nexport default connect(mapStateToProps, {addItem})(ItemModal);","import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport AppNavbar from './components/AppNavbar';\nimport ToDoList from './components/ToDoList';\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport ItemModal from './components/itemModal';\nimport {Container} from 'reactstrap';\nimport {loadUser} from './actions/authActions';\n\nclass App extends Component {\n  componentDidMount() {\n    store.dispatch(loadUser());\n  }\n  \n\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <AppNavbar />\n          <Container>\n            <ItemModal />\n            <ToDoList />\n          </Container>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}